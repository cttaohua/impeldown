(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__name_js__ = __webpack_require__(2);

class ImpelDown {
  constructor(params) {
    try {
      if (!params) {
        throw new Error('No parameters！');
      }
      if (typeof params === 'string') {
        this.params = {
          url: params
        };
        this.createXML();
      } else if (typeof params === 'object') {
        if (!params.url) {
          throw new Error('The url is a required parameter！');
        }
        this.params = params;
        this.createXML();
      } else {
        throw new Error('The argument is expected to be in the format of a string or object！');
      }
    } catch (e) {
      console.error(e);
    }
  }
  createXML() {
    let resource_url = this.params.url;
    let req = new XMLHttpRequest();
    req.open("GET", resource_url, true);
    req.responseType = 'blob';
    req.onreadystatechange = () => {
      if (req.readyState === 4 && req.status === 200) {
        let filename = '';
        if (this.params.name) {
          filename = this.params.name;
        } else {
          filename = Object(__WEBPACK_IMPORTED_MODULE_0__name_js__["a" /* intitle */])(this.params.url, req.response);
        }
        if (typeof window.chrome !== 'undefined') {
          // Chrome version
          let link = document.createElement('a');
          link.href = window.URL.createObjectURL(req.response);
          link.download = filename;
          link.click();
        } else if (typeof window.navigator.msSaveBlob !== 'undefined') {
          // IE version
          let blob = new Blob([req.response], { type: 'application/force-download' });
          window.navigator.msSaveBlob(blob, filename);
        } else {
          // Firefox version
          let file = new File([req.response], filename, { type: 'application/force-download' });
          window.open(URL.createObjectURL(file));
        }
      }
    };

    req.send(null);

    req.addEventListener('loadstart', this.onStart.bind(this), false);
    req.addEventListener('progress', this.onProgress.bind(this), false);
    req.addEventListener('abort', this.onAbort.bind(this), false);
    req.addEventListener('load', this.onSuccess.bind(this), false);
    req.addEventListener('loadend', this.onComplete.bind(this), false);
  }
  // 开始下载
  onStart() {
    this.params.onStart ? this.params.onStart() : null;
  }
  // 监听进度
  onProgress(evt) {
    if (this.params.onProgress) {
      if (evt.lengthComputable) {
        let percentComplete = evt.loaded / evt.total;
        this.params.onProgress(percentComplete);
      }
    }
  }
  // 被用户中止下载
  onAbort() {
    this.params.onAbort ? this.params.onAbort() : null;
  }
  // 传输中出现错误
  onError() {
    this.params.onError ? this.params.onError() : null;
  }
  // 下载成功
  onSuccess() {
    this.params.onSuccess ? this.params.onSuccess() : null;
    this.params.onProgress(1); // 结束之后再次调用进度方法
  }
  // 下载结束 （成功失败都会调用）
  onComplete() {
    this.params.onComplete ? this.params.onComplete() : null;
  }
}

window.impeldown = ImpelDown;

/* harmony default export */ __webpack_exports__["default"] = (ImpelDown);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);
exports.default = __webpack_require__(0);

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = intitle;
//获取n位的数字字母的字符串
function getRandomStr(n) {
  var n = n || 12; //默认12位
  var res = '';
  var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
  for (var i = 0; i < n; i++) {
    var id = Math.ceil(Math.random() * 35);
    res += chars[id];
  }
  return res;
}

// 文件名获取
function intitle(url, response) {
  let lastSlash = url.lastIndexOf('/') + 1,
      lastStr = url.slice(lastSlash, url.length);
  if (lastStr.indexOf('.') != -1) {
    // 可以查询到文件名
    return lastStr;
  } else {
    // 无法查询到文件名
    let type = response.type.split('/')[1];
    return getRandomStr(8) + '.' + type;
  }
}

/* unused harmony default export */ var _unused_webpack_default_export = ({
  getRandomStr,
  intitle
});

/***/ })
/******/ ]);
});
//# sourceMappingURL=impeldown.min.js.map